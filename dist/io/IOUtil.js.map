{"version":3,"file":"IOUtil.js","sourceRoot":"","sources":["../../src/io/IOUtil.ts"],"names":[],"mappings":";;AAAA;IACE;IAAe,CAAC;IAET,sBAAe,GAAtB,UAAuB,UAA2B;QAChD,IAAI,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QACpC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE1C,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEM,gBAAS,GAAhB,UAAiB,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG;YAAE,CAAC,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,IAAI;YAAE,CAAC,GAAG,MAAM,CAAC;QAC3B,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,CACzB,IAAI,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,KAAK,EAAE,GAAG,CACnC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IACH,aAAC;AAAD,CAAC,AAjBD,IAiBC;AAjBY,wBAAM","sourcesContent":["export class IOUtil {\n  constructor() {}\n\n  static parseDataBuffer(dataBuffer: string | Buffer) {\n    let dataStr = dataBuffer.toString();\n    dataStr = IOUtil.trimChars(dataStr, '\\n');\n\n    return dataStr.split('\\n');\n  }\n\n  static trimChars(s, c): string {\n    if (c === \"]\") c = \"\\\\]\";\n    if (c === \"\\\\\") c = \"\\\\\\\\\";\n    return s.replace(new RegExp(\n      \"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"\n    ), \"\");\n  }\n}\n"]}